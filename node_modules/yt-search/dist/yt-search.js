(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ytSearch = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _cheerio = require('cheerio');

var _dasu = require('dasu');

var _parallel = require('async.parallellimit'); // auto follow off


_dasu.follow = true;
_dasu.debug = false;

var _require = require('./util.js'),
    _getScripts = _require._getScripts,
    _findLine = _require._findLine,
    _between = _require._between;

var MAX_RETRY_ATTEMPTS = 3;
var RETRY_INTERVAL = 333; // ms

var jpp = require('jsonpath-plus').JSONPath;

var _jp = {}; // const items = _jp.query( json, '$..itemSectionRenderer..contents.*' )

_jp.query = function (json, path) {
  var opts = {
    path: path,
    json: json,
    resultType: 'value'
  };
  return jpp(opts);
}; // const listId = hasList && ( _jp.value( item, '$..playlistId' ) )


_jp.value = function (json, path) {
  var opts = {
    path: path,
    json: json,
    resultType: 'value'
  };
  var r = jpp(opts)[0];
  return r;
}; // google bot user-agent
// Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
// use fixed user-agent to get consistent html page documents as
// it varies depending on the user-agent
// the string "Googlebot" seems to give us pages without
// warnings to update our browser, which is why we keep it in


var DEFAULT_USER_AGENT = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html) (yt-search; https://www.npmjs.com/package/yt-search)';
var _userAgent = DEFAULT_USER_AGENT; // mutable global user-agent

var _url = require('url');

var _envs = {};
Object.keys(process.env).forEach(function (key) {
  var n = process.env[key];

  if (n == '0' || n == 'false' || !n) {
    return _envs[key] = false;
  }

  _envs[key] = n;
});
var _debugging = _envs.debug;

function debug() {
  if (!_debugging) return;
  console.log.apply(this, arguments);
} // used to escape query strings


var _querystring = require('querystring');

var _humanTime = require('human-time');

var TEMPLATES = {
  YT: 'https://youtube.com',
  SEARCH_MOBILE: 'https://m.youtube.com/results',
  SEARCH_DESKTOP: 'https://www.youtube.com/results'
};
var ONE_SECOND = 1000;
var ONE_MINUTE = ONE_SECOND * 60;
var TIME_TO_LIVE = ONE_MINUTE * 5;
/**
 * Exports
 **/

module.exports = function (query, callback) {
  return search(query, callback);
};

module.exports.search = search;
module.exports._parseSearchResultInitialData = _parseSearchResultInitialData;
module.exports._parseVideoInitialData = _parseVideoInitialData;
module.exports._parsePlaylistInitialData = _parsePlaylistInitialData;
module.exports._videoFilter = _videoFilter;
module.exports._playlistFilter = _playlistFilter;
module.exports._channelFilter = _channelFilter;
module.exports._liveFilter = _liveFilter;
module.exports._allFilter = _allFilter;
module.exports._parsePlaylistLastUpdateTime = _parsePlaylistLastUpdateTime;
/**
 * Main
 */

function search(query, callback) {
  // support promises when no callback given
  if (!callback) {
    return new Promise(function (resolve, reject) {
      search(query, function (err, data) {
        if (err) return reject(err);
        resolve(data);
      });
    });
  }

  var _options;

  if (typeof query === 'string') {
    _options = {
      query: query
    };
  } else {
    _options = query;
  } // init and increment attempts


  _options._attempts = (_options._attempts || 0) + 1; // save unmutated bare necessary options for retry

  var retryOptions = Object.assign({}, _options);

  function callback_with_retry(err, data) {
    if (err) {
      if (_options._attempts > MAX_RETRY_ATTEMPTS) {
        return callback(err, data);
      } else {
        // retry
        debug(' === ');
        debug(' RETRYING: ' + _options._attempts);
        debug(' === ');
        var n = _options._attempts;
        var wait_ms = Math.pow(2, n - 1) * RETRY_INTERVAL;
        setTimeout(function () {
          search(retryOptions, callback);
        }, wait_ms);
      }
    } else {
      return callback(err, data);
    }
  } // override userAgent if set ( not recommended )


  if (_options.userAgent) _userAgent = _options.userAgent; // support common alternatives ( mutates )

  _options.search = _options.query || _options.search; // initial search text ( _options.search is mutated )

  _options.original_search = _options.search; // ignore query, only get metadata from specific video id

  if (_options.videoId) {
    return getVideoMetaData(_options, callback_with_retry);
  } // ignore query, only get metadata from specific playlist id


  if (_options.listId) {
    return getPlaylistMetaData(_options, callback_with_retry);
  }

  if (!_options.search) {
    return callback(Error('yt-search: no query given'));
  }

  work();

  function work() {
    getSearchResults(_options, callback_with_retry);
  }
}

function _videoFilter(video, index, videos) {
  if (video.type !== 'video') return false; // filter duplicates

  var videoId = video.videoId;
  var firstIndex = videos.findIndex(function (el) {
    return videoId === el.videoId;
  });
  return firstIndex === index;
}

function _playlistFilter(result, index, results) {
  if (result.type !== 'list') return false; // filter duplicates

  var id = result.listId;
  var firstIndex = results.findIndex(function (el) {
    return id === el.listId;
  });
  return firstIndex === index;
}

function _channelFilter(result, index, results) {
  if (result.type !== 'channel') return false; // filter duplicates

  var url = result.url;
  var firstIndex = results.findIndex(function (el) {
    return url === el.url;
  });
  return firstIndex === index;
}

function _liveFilter(result, index, results) {
  if (result.type !== 'live') return false; // filter duplicates

  var videoId = result.videoId;
  var firstIndex = results.findIndex(function (el) {
    return videoId === el.videoId;
  });
  return firstIndex === index;
}

function _allFilter(result, index, results) {
  switch (result.type) {
    case 'video':
    case 'list':
    case 'channel':
    case 'live':
      break;

    default:
      // unsupported type
      return false;
  } // filter duplicates


  var url = result.url;
  var firstIndex = results.findIndex(function (el) {
    return url === el.url;
  });
  return firstIndex === index;
}
/* Request search page results with provided
 * search_query term
 */


function getSearchResults(_options, callback) {
  // querystring variables
  var q = _querystring.escape(_options.search).split(/\s+/);

  var hl = _options.hl || 'en';
  var gl = _options.gl || 'US';
  var category = _options.category || ''; // music

  var pageStart = Number(_options.pageStart) || 1;
  var pageEnd = Number(_options.pageEnd) || Number(_options.pages) || 1; // handle zero-index start

  if (pageStart <= 0) {
    pageStart = 1;

    if (pageEnd >= 1) {
      pageEnd += 1;
    }
  }

  if (Number.isNaN(pageEnd)) {
    callback('error: pageEnd must be a number');
  }

  _options.pageStart = pageStart;
  _options.pageEnd = pageEnd;
  _options.currentPage = _options.currentPage || pageStart;
  var queryString = '?';
  queryString += 'search_query=' + q.join('+'); // language
  // queryString += '&'

  if (queryString.indexOf('&hl=') === -1) {
    queryString += '&hl=' + hl;
  } // location
  // queryString += '&'


  if (queryString.indexOf('&gl=') === -1) {
    queryString += '&gl=' + gl;
  }

  if (category) {
    // ex. "music"
    queryString += '&category=' + category;
  }

  if (_options.sp) {
    queryString += '&sp=' + _options.sp;
  }

  var uri = TEMPLATES.SEARCH_DESKTOP + queryString;

  var params = _url.parse(uri);

  params.headers = {
    'user-agent': _userAgent,
    'accept': 'text/html',
    'accept-encoding': 'gzip',
    'accept-language': 'en-US'
  };
  debug(params);
  debug('getting results: ' + _options.currentPage);

  _dasu.req(params, function (err, res, body) {
    if (err) {
      callback(err);
    } else {
      if (res.status !== 200) {
        return callback('http status: ' + res.status);
      }

      if (_debugging) {
        var fs = require('fs');

        var path = require('path');

        fs.writeFileSync('dasu.response', res.responseText, 'utf8');
      }

      try {
        _parseSearchResultInitialData(body, function (err, results) {
          if (err) return callback(err);
          var list = results;
          var videos = list.filter(_videoFilter);
          var playlists = list.filter(_playlistFilter);
          var channels = list.filter(_channelFilter);
          var live = list.filter(_liveFilter);
          var all = list.filter(_allFilter); // keep saving results into temporary memory while
          // we get more results

          _options._data = _options._data || {}; // init memory

          _options._data.videos = _options._data.videos || [];
          _options._data.playlists = _options._data.playlists || [];
          _options._data.channels = _options._data.channels || [];
          _options._data.live = _options._data.live || [];
          _options._data.all = _options._data.all || []; // push received results into memory

          videos.forEach(function (item) {
            _options._data.videos.push(item);
          });
          playlists.forEach(function (item) {
            _options._data.playlists.push(item);
          });
          channels.forEach(function (item) {
            _options._data.channels.push(item);
          });
          live.forEach(function (item) {
            _options._data.live.push(item);
          });
          all.forEach(function (item) {
            _options._data.all.push(item);
          });
          _options.currentPage++;
          var getMoreResults = _options.currentPage <= _options.pageEnd;

          if (getMoreResults && results._sp) {
            _options.sp = results._sp;
            setTimeout(function () {
              getSearchResults(_options, callback);
            }, 2500); // delay a bit to try and prevent throttling
          } else {
            var _videos = _options._data.videos.filter(_videoFilter);

            var _playlists = _options._data.playlists.filter(_playlistFilter);

            var _channels = _options._data.channels.filter(_channelFilter);

            var _live = _options._data.live.filter(_liveFilter);

            var _all = _options._data.all.slice(_allFilter); // return all found videos


            callback(null, {
              all: _all,
              videos: _videos,
              live: _live,
              playlists: _playlists,
              lists: _playlists,
              accounts: _channels,
              channels: _channels
            });
          }
        });
      } catch (err) {
        callback(err);
      }
    }
  });
}
/* For "modern" user-agents the html document returned from
 * YouTube contains initial json data that is used to populate
 * the page with JavaScript. This function will aim to find and
 * parse such data.
 */


function _parseSearchResultInitialData(responseText, callback) {
  var re = /{.*}/;

  var $ = _cheerio.load(responseText);

  var initialData = $('div#initial-data').html() || '';
  initialData = re.exec(initialData) || '';

  if (!initialData) {
    var scripts = $('script');

    for (var i = 0; i < scripts.length; i++) {
      var script = $(scripts[i]).html();
      var lines = script.split('\n');
      lines.forEach(function (line) {
        var i;

        while ((i = line.indexOf('ytInitialData')) >= 0) {
          line = line.slice(i + 'ytInitialData'.length);
          var match = re.exec(line);

          if (match && match.length > initialData.length) {
            initialData = match;
          }
        }
      });
    }
  }

  if (!initialData) {
    return callback('could not find inital data in the html document');
  }

  var errors = [];
  var results = [];
  var json = JSON.parse(initialData[0]);

  var items = _jp.query(json, '$..itemSectionRenderer..contents.*'); // support newer richGridRenderer html structure


  _jp.query(json, '$..primaryContents..contents.*').forEach(function (item) {
    items.push(item);
  });

  debug('items.length: ' + items.length);

  for (var _i = 0; _i < items.length; _i++) {
    var item = items[_i];
    var result = undefined;
    var type = 'unknown';

    var hasList = _jp.value(item, '$..compactPlaylistRenderer') || _jp.value(item, '$..playlistRenderer');

    var hasChannel = _jp.value(item, '$..compactChannelRenderer') || _jp.value(item, '$..channelRenderer');

    var hasVideo = _jp.value(item, '$..compactVideoRenderer') || _jp.value(item, '$..videoRenderer');

    var listId = hasList && _jp.value(item, '$..playlistId');

    var channelId = hasChannel && _jp.value(item, '$..ch